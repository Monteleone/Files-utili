<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>
  File: README
  
    &mdash; Documentation for cancan (1.6.10)
  
</title>

  <link rel="stylesheet" href="/css/style.css" type="text/css" charset="utf-8" />

  <link rel="stylesheet" href="/css/common.css" type="text/css" charset="utf-8" />

  <link rel="stylesheet" href="/css/custom.css" type="text/css" charset="utf-8" />

<script type="text/javascript" charset="utf-8">
  pathId = "README"
  relpath = '/';
  docsPrefix = 'gems/cancan/1.6.10';
  listPrefix = 'list/gems/cancan/1.6.10';
  searchPrefix = 'search/gems/cancan/1.6.10';
</script>


  <script type="text/javascript" charset="utf-8" src="/js/jquery.js"></script>

  <script type="text/javascript" charset="utf-8" src="/js/app.js"></script>

  <script type="text/javascript" charset="utf-8" src="/js/autocomplete.js"></script>

  <script type="text/javascript" charset="utf-8" src="/js/rubydoc_custom.js"></script>


  </head>
  <body>
    <div class="nav_wrap">
      <iframe id="nav" src="/list/gems/cancan/1.6.10/class"></iframe>
      <div id="resizer"></div>
    </div>

    <div id="main" tabindex="-1">
      <div id="header">
        <form class="search" method="get" action="/search/gems/cancan/1.6.10">
  <input name="q" type="search" placeholder="Search" id="search_box" size="30" value="" />
</form>
<script type="text/javascript" charset="utf-8">
  $(function() {
    $('#search_box').autocomplete($('#search_box').parent().attr('action'), {
      width: 200,
      formatItem: function(item) {
        var values = item[0].split(",");
        return values[0] + (values[1] == '' ? "" : " <small>(" + values[1] + ")</small>");
      }
    }).result(function(event, item) {
      var values = item[0].split(",")
      $('#search_box').val(values[1]);
      location.href = values[3];
      return false;
    });
  });
</script>

<div id="menu">
  
    <a href="/gems" target="_top">Libraries</a> &raquo;
    <span class="title">cancan <small>(1.6.10)</small></span>
  
  
    &raquo; 
    <a href="/gems/cancan/1.6.10/index">Index</a> &raquo; 
    <span class='title'>File: README</span>
  
</div>


        <div id="search">
  
    <a class="full_list_link" id="class_list_link"
        href="/list/gems/cancan/1.6.10/class">

        <svg width="24" height="24">
          <rect x="0" y="4" width="24" height="4" rx="1" ry="1"></rect>
          <rect x="0" y="12" width="24" height="4" rx="1" ry="1"></rect>
          <rect x="0" y="20" width="24" height="4" rx="1" ry="1"></rect>
        </svg>
    </a>
  
</div>
        <div class="clear"></div>
      </div>

      <iframe id="search_frame" src="/list/gems/cancan/1.6.10/class"></iframe>

      <div id="content"><div id='filecontents'>
<h1>CanCan <a href="http://badge.fury.io/rb/cancan"><img src="https://fury-badge.herokuapp.com/rb/cancan.png" alt="Gem Version" /></a> <a href="http://travis-ci.org/ryanb/cancan"><img src="https://secure.travis-ci.org/ryanb/cancan.png?branch=master" /></a> <a href="https://codeclimate.com/github/ryanb/cancan"><img src="https://codeclimate.com/badge.png" /></a></h1>

<p><a href="https://github.com/ryanb/cancan/wiki">Wiki</a> | <a
href="http://rdoc.info/projects/ryanb/cancan">RDocs</a> | <a
href="http://railscasts.com/episodes/192-authorization-with-cancan">Screencast</a></p>

<p>CanCan is an authorization library for Ruby on Rails which restricts what
resources a given user is allowed to access. All permissions are defined in
a single location (the <tt>Ability</tt> class) and not duplicated across
controllers, views, and database queries.</p>

<h2>Installation</h2>

<p>In <b>Rails 3</b>, add this to your Gemfile and run the <tt>bundle</tt>
command.</p>

<pre class="code ruby"><code class="ruby"><span class='id identifier rubyid_gem'>gem</span> <span class='tstring'><span class='tstring_beg'>&quot;</span><span class='tstring_content'>cancan</span><span class='tstring_end'>&quot;</span></span></code></pre>

<p>In <b>Rails 2</b>, add this to your environment.rb file.</p>

<pre class="code ruby"><code class="ruby"><span class='id identifier rubyid_config'>config</span><span class='period'>.</span><span class='id identifier rubyid_gem'>gem</span> <span class='tstring'><span class='tstring_beg'>&quot;</span><span class='tstring_content'>cancan</span><span class='tstring_end'>&quot;</span></span></code></pre>

<p>Alternatively, you can install it as a plugin.</p>

<pre class="code ruby"><code class="ruby"><span class='id identifier rubyid_rails'>rails</span> <span class='id identifier rubyid_plugin'>plugin</span> <span class='id identifier rubyid_install'>install</span> <span class='label'>git:</span><span class='tstring'><span class='regexp_beg'>/</span><span class='regexp_end'>/github</span></span><span class='period'>.</span><span class='id identifier rubyid_com'>com</span><span class='op'>/</span><span class='id identifier rubyid_ryanb'>ryanb</span><span class='op'>/</span><span class='id identifier rubyid_cancan'>cancan</span><span class='period'>.</span><span class='id identifier rubyid_git'>git</span></code></pre>

<h2>Getting Started</h2>

<p>CanCan expects a <tt>current_user</tt> method to exist in the controller.
First, set up some authentication (such as <a
href="https://github.com/binarylogic/authlogic">Authlogic</a> or <a
href="https://github.com/plataformatec/devise">Devise</a>). See <a
href="https://github.com/ryanb/cancan/wiki/changing-defaults">Changing
Defaults</a> if you need different behavior.</p>

<h3>1. Define Abilities</h3>

<p>User permissions are defined in an <tt>Ability</tt> class. CanCan 1.5
includes a Rails 3 generator for creating this class.</p>

<pre class="code ruby"><code class="ruby"><span class='id identifier rubyid_rails'>rails</span> <span class='id identifier rubyid_g'>g</span> <span class='label'>cancan:</span><span class='id identifier rubyid_ability'>ability</span></code></pre>

<p>In Rails 2.3, just add a new class in `app/models/ability.rb` with the
folowing contents:</p>

<pre class="code ruby"><code class="ruby"><span class='kw'>class</span> <span class='const'>Ability</span>
  <span class='id identifier rubyid_include'>include</span> <span class='const'>CanCan</span><span class='op'>::</span><span class='const'>Ability</span>

  <span class='kw'>def</span> <span class='id identifier rubyid_initialize'>initialize</span><span class='lparen'>(</span><span class='id identifier rubyid_user'>user</span><span class='rparen'>)</span>
  <span class='kw'>end</span>
<span class='kw'>end</span></code></pre>

<p>See <a
href="https://github.com/ryanb/cancan/wiki/defining-abilities">Defining
Abilities</a> for details.</p>

<h3>2. Check Abilities &amp; Authorization</h3>

<p>The current user&#39;s permissions can then be checked using the
<tt>can?</tt> and <tt>cannot?</tt> methods in the view and controller.</p>

<pre class="code ruby"><code class="ruby">&lt;% if can? :update, @article %&gt;
  &lt;%= link_to &quot;Edit&quot;, edit_article_path(@article) %&gt;
&lt;% end %&gt;</code></pre>

<p>See <a
href="https://github.com/ryanb/cancan/wiki/checking-abilities">Checking
Abilities</a> for more information</p>

<p>The <tt>authorize!</tt> method in the controller will raise an exception if
the user is not able to perform the given action.</p>

<pre class="code ruby"><code class="ruby"><span class='kw'>def</span> <span class='id identifier rubyid_show'>show</span>
  <span class='ivar'>@article</span> <span class='op'>=</span> <span class='const'>Article</span><span class='period'>.</span><span class='id identifier rubyid_find'>find</span><span class='lparen'>(</span><span class='id identifier rubyid_params'>params</span><span class='lbracket'>[</span><span class='symbol'>:id</span><span class='rbracket'>]</span><span class='rparen'>)</span>
  <span class='id identifier rubyid_authorize!'>authorize!</span> <span class='symbol'>:read</span><span class='comma'>,</span> <span class='ivar'>@article</span>
<span class='kw'>end</span></code></pre>

<p>Setting this for every action can be tedious, therefore the
<tt>load_and_authorize_resource</tt> method is provided to automatically
authorize all actions in a RESTful style resource controller. It will use a
before filter to load the resource into an instance variable and authorize
it for every action.</p>

<pre class="code ruby"><code class="ruby"><span class='kw'>class</span> <span class='const'>ArticlesController</span> <span class='op'>&lt;</span> <span class='const'>ApplicationController</span>
  <span class='id identifier rubyid_load_and_authorize_resource'>load_and_authorize_resource</span>

  <span class='kw'>def</span> <span class='id identifier rubyid_show'>show</span>
    <span class='comment'># @article is already loaded and authorized
</span>  <span class='kw'>end</span>
<span class='kw'>end</span></code></pre>

<p>See <a
href="https://github.com/ryanb/cancan/wiki/authorizing-controller-actions">Authorizing
Controller Actions</a> for more information.</p>

<h3>3. Handle Unauthorized Access</h3>

<p>If the user authorization fails, a <tt>CanCan::AccessDenied</tt> exception
will be raised. You can catch this and modify its behavior in the
<tt>ApplicationController</tt>.</p>

<pre class="code ruby"><code class="ruby"><span class='kw'>class</span> <span class='const'>ApplicationController</span> <span class='op'>&lt;</span> <span class='const'>ActionController</span><span class='op'>::</span><span class='const'>Base</span>
  <span class='id identifier rubyid_rescue_from'>rescue_from</span> <span class='const'>CanCan</span><span class='op'>::</span><span class='const'>AccessDenied</span> <span class='kw'>do</span> <span class='op'>|</span><span class='id identifier rubyid_exception'>exception</span><span class='op'>|</span>
    <span class='id identifier rubyid_redirect_to'>redirect_to</span> <span class='id identifier rubyid_root_url'>root_url</span><span class='comma'>,</span> <span class='symbol'>:alert</span> <span class='op'>=&gt;</span> <span class='id identifier rubyid_exception'>exception</span><span class='period'>.</span><span class='id identifier rubyid_message'>message</span>
  <span class='kw'>end</span>
<span class='kw'>end</span></code></pre>

<p>See <a
href="https://github.com/ryanb/cancan/wiki/exception-handling">Exception
Handling</a> for more information.</p>

<h3>4. Lock It Down</h3>

<p>If you want to ensure authorization happens on every action in your
application, add <tt>check_authorization</tt> to your
ApplicationController.</p>

<pre class="code ruby"><code class="ruby"><span class='kw'>class</span> <span class='const'>ApplicationController</span> <span class='op'>&lt;</span> <span class='const'>ActionController</span><span class='op'>::</span><span class='const'>Base</span>
  <span class='id identifier rubyid_check_authorization'>check_authorization</span>
<span class='kw'>end</span></code></pre>

<p>This will raise an exception if authorization is not performed in an
action. If you want to skip this add <tt>skip_authorization_check</tt> to a
controller subclass. See <a
href="https://github.com/ryanb/cancan/wiki/Ensure-Authorization">Ensure
Authorization</a> for more information.</p>

<h2>Wiki Docs</h2>
<ul><li>
<p><a href="https://github.com/ryanb/cancan/wiki/Upgrading-to-1.6">Upgrading
to 1.6</a></p>
</li><li>
<p><a href="https://github.com/ryanb/cancan/wiki/Defining-Abilities">Defining
Abilities</a></p>
</li><li>
<p><a href="https://github.com/ryanb/cancan/wiki/Checking-Abilities">Checking
Abilities</a></p>
</li><li>
<p><a
href="https://github.com/ryanb/cancan/wiki/Authorizing-Controller-Actions">Authorizing
Controller Actions</a></p>
</li><li>
<p><a href="https://github.com/ryanb/cancan/wiki/Exception-Handling">Exception
Handling</a></p>
</li><li>
<p><a href="https://github.com/ryanb/cancan/wiki/Changing-Defaults">Changing
Defaults</a></p>
</li><li>
<p><a href="https://github.com/ryanb/cancan/wiki">See more</a></p>
</li></ul>

<h2>Questions or Problems?</h2>

<p>If you have any issues with CanCan which you cannot find the solution to in
the <a href="https://github.com/ryanb/cancan/wiki">documentation</a>,
please add an <a href="https://github.com/ryanb/cancan/issues">issue on
GitHub</a> or fork the project and send a pull request.</p>

<p>To get the specs running you should call <tt>bundle</tt> and then
<tt>rake</tt>. See the <a
href="https://github.com/ryanb/cancan/blob/master/spec/README.rdoc">spec/README</a>
for more information.</p>

<h2>Special Thanks</h2>

<p>CanCan was inspired by <a
href="https://github.com/stffn/declarative_authorization/">declarative_authorization</a>
and <a href="https://github.com/makandra/aegis">aegis</a>. Also many thanks
to the CanCan <a
href="https://github.com/ryanb/cancan/contributors">contributors</a>. See
the <a
href="https://github.com/ryanb/cancan/blob/master/CHANGELOG.rdoc">CHANGELOG</a>
for the full list.</p>
</div></div>

      <div id="footer">
  Generated on Thu Apr  9 09:56:56 2015 by
  <a href="http://yardoc.org" title="Yay! A Ruby Documentation Tool" target="_parent">yard</a>
  0.8.7.6 (ruby-2.1.4).
</div>


  <script src="http://static.getclicky.com/js" type="text/javascript"></script>
  <script type="text/javascript">clicky.init(246206);</script>
  <noscript><p><img alt="Clicky" width="1" height="1" src="http://static.getclicky.com/246206ns.gif" /></p></noscript>



  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-7172246-5', 'auto');
  ga('send', 'pageview');
  </script>


    </div>
  </body>
</html>