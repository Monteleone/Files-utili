::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::									    SESSIONI						           :::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


INTRODUZIONE:
__________________
Cosa è la Sessione?

La Sessione rappresenta lo stato associato ad una sequenza di pagine visualizzate
da un utente. Prendiamo come esempio la conversazione per acquistare un prodotto.
NB: Per conversazione si intende una sequenza di pagine di senso compiuto


•l’utente inserisce username e password:Il server ottiene i dati e li
verifica con i dati presenti nel database dei registrati: viene creata la sessione.

•Utente è autorizzato, sfoglia il catalogo alla
ricerca di un prodotto; il server lo riconosce
attraverso i dati di sessione

•Trova il prodotto e lo mette nel
carrello: la sua sessione viene
aggiornata con le informazioni del
prodotto

•Compila i dati di consegna

•Provvede al pagamento, fine
della conversazione di acquisto

•La sessione è ancora attiva e l’utente può
fare una altro acquisto o uscire dal sito


La Sessione ha quindi i seguenti requisiti:
• Deve essere condivisa dal Client e dal Server
• È associata ad una o più conversazioni effettuate da un singolo utente
• Ogni utente possiede la sua singola sessione


Ci sono due tecniche di base per gestire la sessione:
1. Utilizzo della struttura dei cookie
2. Gestione di uno stato sul server per ogni utente collegato
• I cookie fanno parte dello standard http, sono quindi sempre disponibili
• La gestione dello stato sul server è possibile in alcune architetture specifiche


I cookie possono essere generati sia dal client che dal server, dopo la loro
creazione vengono sempre passati ad ogni trasmissione di request e response.


SESSIONE IN RAILS:
__________________

Rails permette di gestire le informazioni a livello di sessione tramite un hash che persiste da una
richiesta all'altra e può contenere qualsiasi oggetto serializzabile.
Esempio: uso un hash session per trovare l'ID dell'utente senza dover passare per il database.
Come abbiamo visto, Rails predilige l'uso di boilerplate code (convenction over configuration) 

La gestione della sessione è uno di quei compiti che affliggono moltissimo gli sviluppatori.
Rails usa un CookieStore come gestore di sessioni.
Questo significa che tutte le informazioni di cui abbiamo bisogno sulla sessione di un utente , sono 
mandate al client e NIENTE viene salvato sul server.
Quando un utente manda una richiesta, i cookie di sessione sono processati e validati, in questo modo, Rails è in grado di identificare correttamente l'utente dal database. 

I cookie quindi sono la maniera per fare ricordare al server chi siamo, tra una richiesta e l'altra.
Ogni volta che inviamo una richiesta al browser, inviamo tutti i cookie che abbiamo di quel dominio.
Un cookie di sessione di Rails, inoltre , viene crittato prima di essere inviato tramite browser.
Il cookie è un hash simile a qualcosa del genere:

cookie = {
  "session_id": "Value",
  "_csrf_token": "token",
  "user_id": "1"
}

Una sessione normalmente consiste in un hash di valori e session id.
Ogni cookie mandato al client include la sessione dell'id.
In Rails , per salvare e riprendere i valori di una sessione , possiamo usare il seguente metodo:

session[:user_id] = @current_user.id
User.find(session[:user_id])

Come possiamo vedere, usiamo un Hash per salvare l'id dell'utente
Hash - (chiave , valore )

Un session id è una stringa random, o qualcosa di simile

Nel progetto ho usato come id del carrello (per esempio) l'identificatore univoco della Tabella carts del database
ho preso l'id del carrello appena creato e l'ho salvato nella sessione (nel hash della sessione)

session[:cart_id] = @cart.id

