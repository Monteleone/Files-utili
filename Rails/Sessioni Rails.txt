::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::									    SESSIONI						           :::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


INTRODUZIONE:
__________________
Cosa è la Sessione?

La Sessione rappresenta lo stato associato ad una sequenza di pagine visualizzate
da un utente. Prendiamo come esempio la conversazione per acquistare un prodotto.
NB: Per conversazione si intende una sequenza di pagine di senso compiuto


•l’utente inserisce username e password:Il server ottiene i dati e li
verifica con i dati presenti nel database dei registrati: viene creata la sessione.

•Utente è autorizzato, sfoglia il catalogo alla
ricerca di un prodotto; il server lo riconosce
attraverso i dati di sessione

•Trova il prodotto e lo mette nel
carrello: la sua sessione viene
aggiornata con le informazioni del
prodotto

•Compila i dati di consegna

•Provvede al pagamento, fine
della conversazione di acquisto

•La sessione è ancora attiva e l’utente può
fare una altro acquisto o uscire dal sito


La Sessione ha quindi i seguenti requisiti:
• Deve essere condivisa dal Client e dal Server
• È associata ad una o più conversazioni effettuate da un singolo utente
• Ogni utente possiede la sua singola sessione


Ci sono due tecniche di base per gestire la sessione:
1. Utilizzo della struttura dei cookie
2. Gestione di uno stato sul server per ogni utente collegato
• I cookie fanno parte dello standard http, sono quindi sempre disponibili
• La gestione dello stato sul server è possibile in alcune architetture specifiche


I cookie possono essere generati sia dal client che dal server, dopo la loro
creazione vengono sempre passati ad ogni trasmissione di request e response.


RACK, IL MIDDLEWARE DI RAILS
____________________________


Cominciamo col dire che Rails si basa su Rack
Rack è un middleware che fa molto di piu' di "filtrare una richiesta e una risposta". E' l' implementazione di un pipeline design pattern per web server.

Che vuil dire "pipeline design pattern" ?

Semplicemente che una richiesta passa tramite determinate "parti" di una pipeline. Venendo , in questo modo,
filtrata e modellata.
Queste "parti" si occupano di:


*Authentication: when the request arrives, are the users logon details correct? How do I validate this OAuth, HTTP 									 Basic Authentication, name/password?

*Authorisation: "is the user authorised to perform this particular task?", i.e. role-based security.

*Caching: have I processed this request already, can I return a cached result?

*Decoration: how can I enhance the request to make downstream processing better?

*Performance & Usage Monitoring: what stats can I get from the request and response?

*Execution: actually handle the request and provide a response.


Cominciamo col parlare delle basi di una comunicazione browser/server.
Abbiamo sviluppato una applicazione con Rails e abbiamo la nostra pagina in http://localhost:3000/users
Questo mostra tutti gli utenti che abbiamo nel DB.
La richiesta "/users" arriva al nostro server Rails e chiede di vedere tutti gli utenti

Dietro le scene , questa è una richiesta HTTP che il browser invia e risulta essere qualcosa di questo tipo:


// Request by the browser

GET /users HTTP/1.1
Host: localhost
Connection: close

And, the response sent by the server looks like:

// Response by the server

HTTP/1.1 200 OK
Content-Length: 25
Content-Type: text/html
<html>
...
</html>


Adesso , noi siamo un Web Server con sopra una applicazione Rails. Il browser ci richiede una certa pagina (quella degli users per esempio). Come server , noi siamo in grado di capire una richiesta HTTP. Il problema è che non 
sappiamo cosa farcene di una richiesta del genere. Dobbiamo , infatti , farla arrivare alla nostra applicazione Rails, perche' è lei che è in grado di elaborarla (mostrandoci gli utenti)
Il problema sta proprio qua. La nostra app in Rails non capisce le richieste HTTP. Dobbiamo , percio' , convertirle in un linguaggio capibile a Rails, con il quale ci possa lavorare senza problemi (in Ruby).
Chi fa questo lavoro di "conversione" è un middleware (che sta a metà tra HTTP e Rails) chiamato Rack.
Detto in parole piu' semplici: 

Rack converte una richiesta HTTP in un Hash Ruby.

env = {
  'REQUEST_METHOD' => 'GET',
  'PATH_INFO' => '/users',
  'HTTP_VERSION' => '1.1',
  'HTTP_HOST' => 'localhost',
  ...
  ...
}

La variabile env è inviata alla app
Rails elabora un risposta che sara' nuovamente convertita da Rack in HTTP (perchè i browser capiscono HTTP)

// Rails app to server

[
  200,
  {
    'Content-Length' => '25',
    'Content-Type' => 'text/html'
  },
  [
    '<html>',
    '...',
    '</html>'
  ]
]


E' lui che si occupa di gestire i cookie e le sessioni (siamo al basso livello)




SESSIONE IN RAILS:
__________________

Rails permette di gestire le informazioni a livello di sessione tramite un hash che persiste da una
richiesta all'altra e può contenere qualsiasi oggetto serializzabile.
Esempio: uso un hash session per trovare l'ID dell'utente senza dover passare per il database.
Come abbiamo visto, Rails predilige l'uso di boilerplate code (convenction over configuration) 

La gestione della sessione è uno di quei compiti che affliggono moltissimo gli sviluppatori.
Rails usa di default un CookieStore come gestore di sessioni.
Questo significa che tutte le informazioni di cui abbiamo bisogno sulla sessione di un utente , sono 
mandate al client e NIENTE viene salvato sul server.
Quando un utente manda una richiesta, i cookie di sessione sono processati e validati, in questo modo, Rails è in grado di identificare correttamente l'utente dal database. 

I cookie quindi sono la maniera per fare ricordare al server chi siamo, tra una richiesta e l'altra.
Ogni volta che inviamo una richiesta al browser, inviamo tutti i cookie che abbiamo di quel dominio.
Un cookie di sessione di Rails, inoltre , viene crittato prima di essere inviato tramite browser.
Il cookie è un hash simile a qualcosa del genere:

cookie = {
  "session_id": "Value",
  "_csrf_token": "token",
  "user_id": "1"
}


Rails separa il concetto di sessione da quello delle specifiche di come l'informazione di sessione e' memorizzato.
La sessione, come visto fino ad ora, è un concetto astratto con il quale interagiamo indipendentemente da dove 
è salvato. Le diverse metodologie di sessioni disponibili sono:


   CookieStore
   CacheStore
   ActiveRecordStore  (usa una tabella dove salva i dati di sessione. Client e server si scambiano l'ID di sessione)


Vediamo un poco piu' da vicino il CookieStore:

Come detto Rails deve usare i cookies per gestire la conversazione tra client e server. Non importa quale sistema di store session sia usato. Avremo comunque sempre bisogno di usare i cookie , per la natura stessa del protocollo HTTP (stateless 'senza stato').

Che misure prende Rails per tenere sicuri i cookie? In Rails 4 i cookie vengono crittati , invece in Rails 3 venivano solamente codificati in Base64.
 
Base64 was created to transport data; not protect it.

In Rails 4 i cookie possono essere letti solo dal server, che è in grado di decrittarli.
Inoltre, per evitare che qualcuno possa manomettere il cookie , Rails introduce una firma (SHA  produce un message digest, o "impronta del messaggio", di lunghezza fissa partendo da un messaggio di lunghezza variabile.)
La firma viene inserita alla fine del cookie.

Quando il server riceve il cookie, prende la parte di dati prima della firma e la decodifica.
Il server ricrea la firma usando la stessa chiave segrata usata per generare la firma originale.
Se le due firme concidono il cookie non è stato manomesso. Se è stato manomesso , la sessione viene cancellata.

La chiave segreta è disponibile SOLO nel server. E' una chiave di 128 caratteri generata randomicamente. Ovviamente bisogna stare molto attenti nel proteggere questa chiave.
In Rails 4.1 it’s secret_key_base in config/secrets.yml


Potremmo chiederci quale è la differenza tra il semplice cookie e la sessione.
Vediamo questo esempio:

cookie[:foo] = 'bar'

session[:foo] = 'bar'

Inizialmente potrebbero sembrare identici , ma in realta' ci sono delle considerazioni da fare.
I cookie viaggiano in chiaro mentre i cookie della session sono (come visto prima) crittati , firmati e serializzati.
Quindi usiamo i cookie per mandare informazioni pochi importanti e la session per mandare informazioni sensibili (ID dell'utente)
Inoltre i cookie della session vengono cancellati dopo il logout o la chiusura del browser


I've got this in my config/environment.rb

  config.action_controller.session = {
    :session_key => [some key],
    :secret => [some secret]
  }

If you have secret_key_base set, your cookies will be encrypted.
If you have both secret_token and secret_key base set, your cookies will be encrypted, and signed cookies


Una sessione normalmente consiste in un hash di valori e session id.
Ogni cookie mandato al client include la sessione dell'id.
In Rails , per salvare e riprendere i valori di una sessione , possiamo usare il seguente metodo:

session[:user_id] = @current_user.id
User.find(session[:user_id])

Come possiamo vedere, usiamo un Hash per salvare l'id dell'utente
Hash - (chiave , valore )

Un session id è una stringa random, o qualcosa di simile

Nel progetto ho usato come id del carrello (per esempio) l'identificatore univoco della Tabella carts del database
ho preso l'id del carrello appena creato e l'ho salvato nella sessione (nel hash della sessione)

session[:cart_id] = @cart.id


A session cookie is signed and encrypted (encryption is new in Rails 4) then sent to the browser.


PERCHE' HO UNA MENTE MALATA:
Come salvo le sessioni in Rack:
________________________________


Cercando in rete , tra i vari github degli sviluppatori, sono riuscito a trovare nella implementazione di Rack
la parte incriminata che si occupa di gestire le sessioni:


https://github.com/rack/rack/blob/master/lib/rack/session/cookie.rb#L153


 rack/lib/rack/session/cookie.rb


def get_session(env, sid)
        data = unpacked_cookie_data(env)
        data = persistent_session_id!(data)
        [data["session_id"], data]
      end

      def extract_session_id(env)
        unpacked_cookie_data(env)["session_id"]
      end

      def unpacked_cookie_data(env)
        env["rack.session.unpacked_cookie_data"] ||= begin
          request = Rack::Request.new(env)
          session_data = request.cookies[@key]

          if @secrets.size > 0 && session_data
            digest, session_data = session_data.reverse.split("--", 2)
            digest.reverse! if digest
            session_data.reverse! if session_data
            session_data = nil unless digest_match?(session_data, digest)
          end

          coder.decode(session_data) || {}
        end
      end

		....
		....


Vediamo effettivamente che prende la variabile 'env' , spiegata all'inizio di questa pagina :D









