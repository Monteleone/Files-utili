::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::									    Devise  						           :::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Da leggere in accoppiata di Sessioni Rails.txt



BACKGROUND
____________________


Devise è costruito sopra una libreria chiamata Warden (trad: Guardiano)
Warden è una libreria per l'autenticazione di basso livello.
Warden comunica con Rack , il middleware che si adopera per fare comunicare HTTP e Rails.

(Leggere Warden nel file Sessioni Rails.txt)


Devise è una libreria modulare e al momento è formato da undici moduli, ciascuno dei quali fornisce un aspetto differente di autenticazione. Per esempio uno dei moduli, Rememberable, si ricorda l’autenticazione dell’utente memorizzata in un cookie mentre un’altra, Recoverable, si occupa di resettare la password dell’utente e di mandare le istruzioni per il reset via email. Questo approccio rende semplice la scelta di quali parti dell’autenticazione si vogliono usare (e quali no) all’interno della propria applicazione.

Per installare Devise bisgna svolgere alcune azioni specifiche:

Il primo è di settare l’opzione host per il mailer di applicazione, mentre il secondo indica che che è necessario aver specificato l’instradamento di root

/config/environments/development.rb

config.action_mailer.default_url_options = { :host => 'localhost:3000' }


Devise permette di generare models. Noi lo useremo per generare quello degli User.
Non è necessario crearlo tramite Devise, possiamo farlo anche a mano (tramite scaffold), ma Devise
setta alcune cose per noi in automatico. Setta:

un file di modello, una migration e un instradamento devise_for.

Il modello User è grossomodo simile ad ogni altro modello ActiveRecord, ma ha in particolare una chiamata al metodo devise, ed è, qui che la magia dell’autenticazione avviene. Il metodo devise accetta come argumenti una lista di moduli che vogliamo supportare nella nostra applicazione: fra questi dovreste riconoscere :rememberable e :recoverable dal momento che li abbiamo citati poco fa. Possiamo facilemente aggiungere o rimuovere moduli da questa lista per personalizzare l’autenticazione di devise per la necessità della nostra applicazione. A questo scopo abbiamo rimosso :confirmable perchè non vogliamo che gli utenti debbano confermare la loro iscrizione via email.
Ricordiamo che creare un model vuol dire andare a mettere una tabella nel nostro DB
La migration che Devise genera permette di potere modificare il modello di default che Devise ha fatto per noi.
Per esempio , vogliamo introdurre un nuovo attributo? (Come del resto ho fatto per inserire la colonna "admin")
Andiamo a modificare la migration e poi la applichiamo.
rake db:migrate e lo applichiamo.

Infine abbiamo il route devise_for che è stato aggiunto al file degli instradamenti per noi. Se lanciamo rake routes, possiamo vedere gli instradamenti che questa linea di codice crea:

devise_for :users

Anche se è un po’ difficile da leggere, possiamo vedere che ci sono molti instradamenti di autenticazione inclusi per il sign-in e il sign-out, il reset delle password, l’autenticazione come nuovo utente ed il reset di un profilo. Questi instradamenti sono tutti personalizzabili se volessimo cambiarli.
Comunque la cosa importante è che vediamo che viene richiamato un controller chiamato session quando logghiamo, slogghiamo etc etc. Il controller lo genera Devise per noi.
In pratica , quando aggiungiamo devise_for :user stiamo mappando le richeste relative gli utenti
al controller di devise.
Possiamo ora accedere al nostro meccanismo di autenticazione mediante questi route. Se andiamo all’URL /users/sign_up vediamo la form di autenticazione come nuovo utente.

user_signed_in?, che viene fornito da devise e che restituisce true se l’utente corrente è autenticato.
Possiamo mostrare l’indirizzo email chiamando current_user per avere un riferimento all’oggetto User dell’utente corrente e mostrarne la proprietà email. 

Se si volesse cambiare il comportamento di Devise , per esempio per creare un nuovo utente, non conviene andare
a modificare la gemma. Conviene , invece , creare un controller (facendolo ereditare da Devise::SessionsController ) e con un override scrivere il proprio comportamento. 

es:
class SessionsController < Devise::SessionsController

Cosi creiamo il nostro SessionController personale.

Rails 4 ha spostato i parameter sanitization dal model al controller , facendo si che anche devise dovesse
gestire i suddetti parametri nel suo controller.

CONTROLLER FILTERS E HELPERS
______________________________

Devise creerà molti helpers per poterli inserire nei vostri controller e views , e facilitarvi il lavoro.
Per esempio, per fare in modo che un controller possa essere acceduto solamente dagli utenti presenti nel database, bisogna aggiungere all'inizio del controller : before_action
In pratica , prima di ogni azione che richiediamo in questo controller , andiamo a chiamare una funzione
di callback che andrà a verificare se l'utente che ha fatto accesso al controller abbia le giuste credenziali.
La funzione in questione è la:  authenticate_user!

before_action :authenticate_user!

Il metodo sopra riportato , è scritto tramite metaprogrammazione

 def authenticate_#{mapping}!(opts={})
    opts[:scope] = :#{mapping}
    warden.authenticate!(opts) if !devise_controller? || opts.delete(:force)
  end
  ...
end

In pratica chiede a Rack se l'utente è stato autenticato tramite la sua password

 env['warden'].authenticate!(:password)


HELPERS
______________________________


user_signed_in?

Per verificare se un utente è loggato usiamo l'helper user_signed_in?
Il metodo user_signed_in? controlla la sessione.
user_signed_in?

def #{group_name}_signed_in?
              #{mappings}.any? do |mapping|
                warden.authenticate?(scope: mapping)
              end
            end


current_user
current_user è definito dinamicamente in Devise. Questo perchè possiamo chiamare il suddetto metodo per
un qualsiasi model che abbiamo definito.  current_whatever


def current_#{mapping}
    @current_#{mapping} ||= warden.authenticate(:scope => :#{mapping})
end


warden prende la sessione dell'utente e ritorna l'user che è collegato in questo momento
ovvero quello che ha la sessione attiva.


user_session

Con user_session possiamo ritornare la sessione dell'utente.

  def #{mapping}_session
      current_#{mapping} && warden.session(:#{mapping})
  end

 warden.session:


    def session
      env["rack.session"] || {}
    end
  end # SessionSerializer

After signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect to. For instance, when using a :user resource, the user_root_path will be used if it exists; otherwise, the default root_path will be used. 



COME FUNZIONA IL SESSION
______________________________

Quando un utente si collega per la prima volta al server , gli viene restituito un cookie prima e
dopo che avrà effettuato il log in 
La maniera piu' semplice per verificare che un utente sia autenticato è quello di utilizzare un cookie (cifrato)
per salvare le credenziali dell'utente 
Il cookie sarà qualcosa di questo tipo:
{
  "session_id"           => "974561a18fc4aa7e44a19240647abaf4e",
  "warden.user.user.key" => [[1], "$2a$10$QOxmmQkm8i8WJ85TE9.cZO"],
  "_csrf_token"          => "jtbd2pGvI1AMIM3KqesbjU1K4wv3blFLp2tert3D8sc="
}


UN POCO PIU' IN PROFONDITA' :
______________________________

Nel github degli sviluppatori di Warden:

https://github.com/hassox/warden/blob/master/lib/warden/mixins/common.rb

 warden/lib/warden/mixins/common.rb


      # Convenience method to access the session
      # :api: public
      def session
        env['rack.session']
      end # session

      # Alias :session to :raw_session since the former will be user API for storing scoped data.
      alias :raw_session :session
		
			...
			...

Come vediamo Warden si appoggia a Rack , dal quale prende env[rack.session] e la ritorna
Definiamo un alias del tipo:   :session per accedere piu' facilmente alla sessione.


L' hash della sessione è salvato in un hash di rack che si puo' richiamare come: rack.session
Con questo possiamo accedere alla sessione , assumendo che la variabile di enviroment di rack sia appunto "env"

env['rack.session'][:msg]="Hello Rack"

Alternatively, you could use Rack’s built in request object, like this:

request = Rack::Request.new(env)
request.session[:msg]="Hello Rack"




secret_key_base in Rails 4 è un long , pseudorandom di caratteri in esadecimale
Prima della versione 4 era stato chiamato come secret_token. Questo valore è usato per generare una chiave
per cifrare e firmare i dati di una sessione che sono salvati nei cookies.
Una secret_key_base è qualcosa di questo tipo:


2f4cef0a1548b04ad4825bfc3b7502fb3e801ff546b2815b9dfff06a40483207 76f08ac0052bef106bb44bae8c5516d1250c3b4f6448dc4e144fddff6b902351

Ed è usato per creare qualcosa di questo tipo:

    MUZQenBHbjdEQ0N6ZXU1c2E1MUc1a200cVVJOFNMSHdHRkJTNnNibGZ 3dmE0OWd4SE9VcjVYVVJBN2VISlVEZlZLZTIrVnFmbktLQlZLcXo3bEdBRC svSitqWTJiNUdVbUN6VGZCcEtna0VOemQ2cXR2WGM5VnF5MEtPakNMR m5aVXFDaitCbVdvVWVCZzYyN1hXbWhCY3pNMVVuRXJnSGZOZHNUdlh hbXM1bWRqYmRuNG5oTkxaTDlBbk92ejdmOTVLbGxSRnhtTXh3dEJ2eWM 5d3d4T0R6V1JwN1E5R0pXSmR1eC94VlZKenZrOUU3TTl4U3FZMHZVak4z bG5JUktMUjE5OHkrTm5rQUZ4S1JUZTgrRFVGQ2kxc3ozQ3YyRmhZSk5X WDZrdCsxM1E4UjBWdXdYbFAzcGI5UFdvU0lQbEUyVGN5b2wzcGZIWWVk aXkrTWtnPT0tLUtmVXZoLzRTcmw1SFZkTm5wRTJBbnc9PQ%3D%3D– dae46f90d49d52782862a37a4173b1dbc4054f2d


Che è un valore cifrato e firmato , salvato client-side in un cookie. La stringa cifrata e firmata è delimitata da due simboli "-"
Se logghiamo come user (username: hank@example.com, pw: password) e (in Chrome)andiamo in View -> Developer -> Developer Tools e clicchiamo su Risorse , dovfemmo vedere qualcosa di questo tipo:
Clicchiamo sui cookies e vediamo il suo valore. E' cifrato e segnato esattamente con il metodo sopra descritto

Se volessimo decifrare un cookie session e vedere cosa contenga, dobbiamo fare partire dall'application root:


$ rails runner lib/decrypt_session_cookie.rb

Incollare il session cookie che è cifrato e farci restituire il decifrato. Come per esempio:


Value for _sessiongoat_session:

MUZQenBHbjdEQ0N6ZXU1c2E1MUc1a200cVVJOFNMSHdHRkJTNnNibGZ
3dmE0OWd4SE9VcjVYVVJBN2VISlVEZlZLZTIrVnFmbktLQlZLcXo3bEdBRC
svSitqWTJiNUdVbUN6VGZCcEtna0VOemQ2cXR2WGM5VnF5MEtPakNMR
m5aVXFDaitCbVdvVWVCZzYyN1hXbWhCY3pNMVVuRXJnSGZOZHNUdlh
hbXM1bWRqYmRuNG5oTkxaTDlBbk92ejdmOTVLbGxSRnhtTXh3dEJ2eWM
5d3d4T0R6V1JwN1E5R0pXSmR1eC94VlZKenZrOUU3TTl4U3FZMHZVak4z
bG5JUktMUjE5OHkrTm5rQUZ4S1JUZTgrRFVGQ2kxc3ozQ3YyRmhZSk5X
WDZrdCsxM1E4UjBWdXdYbFAzcGI5UFdvU0lQbEUyVGN5b2wzcGZIWWVk
aXkrTWtnPT0tLUtmVXZoLzRTcmw1SFZkTm5wRTJBbnc9PQ%3D%3D--
dae46f90d49d52782862a37a4173b1dbc4054f2d

Decrypted hash is:

 {
 "session_id"=>"809617b8c8efc7bd60a0cd7382e0785a",
 "warden.user.user.key"=>[[1], "$2a$10$shYu646nn4CV9Vujs/VvgO"],
 "flash"=>{"discard"=>["notice"],
 "flashes"=>{"notice"=>"Signed in successfully."}},
 "_csrf_token"=>"Tv6oJT/Etv/MoD3c6ZYCazG2OiEcFbtY+hvTkIJY2io="
 }


Possiamo notare che il cookie decrittato della sessione ha un warden.user.user.key key
Questa è una informazione salvata client-side (di default) ed è quello che la gemma Devise usa per tenere traccia di quale utente siamo. In questo caso , 1 è l'id dell'user e $2a$10$shYu646nn4CV9Vujs/VvgO sono i primi 30 caratteri 
della password dell'utente. La password è generata grazie a bcrypt. Bcrypt è una funzione basata su key, come PBKDF2, che è progettata per essere lenta,  in modo da fare rallentare notevolmente gli attacchi Brute Force.
E' un algoritmo molto comune , usato con funzioni di hashing per cifrare le password e salvarle.
It may seem like a problem to expose this information client side, but the only thing that is exposed is some information that the bcrypt algorithm uses and the salt for the password. The salt by itself is not very useful information to an attacker.
















